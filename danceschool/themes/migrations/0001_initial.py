# -*- coding: utf-8 -*-
# Generated by Django 1.11.10 on 2018-02-23 01:04
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import djangocms_attributes_field.fields
import djangocms_link.validators
import djangocms_text_ckeditor.fields
import filer.fields.image


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cms', '0019_auto_20180222_2004'),
        migrations.swappable_dependency(settings.FILER_IMAGE_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BootstrapCarousel',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='themes_bootstrapcarousel', serialize=False, to='cms.CMSPlugin')),
                ('template', models.CharField(blank=True, max_length=250, null=True, verbose_name='Carousel template')),
                ('carousel_interval', models.IntegerField(default=5000, help_text='The amount of time to delay between automatically cycling an item. If false, carousel will not automatically cycle.', verbose_name='Interval')),
                ('carousel_controls', models.BooleanField(default=True, help_text='Adding in the previous and next controls.', verbose_name='Controls')),
                ('carousel_indicators', models.BooleanField(default=True, help_text='Adding in the indicators to the carousel.', verbose_name='Indicators')),
                ('carousel_keyboard', models.BooleanField(default=True, help_text='Whether the carousel should react to keyboard events.', verbose_name='Keyboard')),
                ('carousel_pause', models.CharField(choices=[('hover', 'hover'), ('mouseenter', 'mouseenter'), ('mouseleave', 'mouseleave'), ('false', 'off')], default='hover', help_text='If set to "hover", pauses the cycling of the carousel on "mouseenter" and resumes the cycling of the carousel on "mouseleave". If set to "false", hovering over the carousel won\'t pause it.', max_length=255, verbose_name='Pause')),
                ('carousel_ride', models.CharField(choices=[('carousel', 'carousel'), ('false', 'off')], default='carousel', help_text='Autoplays the carousel after the user manually cycles the first item. If "carousel", autoplays the carousel on load.', max_length=255, verbose_name='Ride')),
                ('carousel_wrap', models.BooleanField(default=True, help_text='Whether the carousel should cycle continuously or have hard stops.', verbose_name='Wrap')),
                ('carousel_aspect_ratio', models.CharField(blank=True, choices=[('1x1', '1x1'), ('3x2', '3x2'), ('4x3', '4x3'), ('21x9', '21x9'), ('18x9', '18x9')], default='', help_text='Determines width and height of the image according to the selected ratio.', max_length=255, verbose_name='Aspect ratio')),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin',),
        ),
        migrations.CreateModel(
            name='BootstrapCarouselSlide',
            fields=[
                ('template', models.CharField(choices=[('default', 'Default')], default='default', max_length=255, verbose_name='Template')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='Display name')),
                ('external_link', models.URLField(blank=True, help_text='Provide a valid URL to an external website.', max_length=2040, validators=[djangocms_link.validators.IntranetURLValidator(intranet_host_re=None)], verbose_name='External link')),
                ('anchor', models.CharField(blank=True, help_text='Appends the value only after the internal or external link. Do <em>not</em> include a preceding "#" symbol.', max_length=255, verbose_name='Anchor')),
                ('mailto', models.EmailField(blank=True, max_length=255, verbose_name='Email address')),
                ('phone', models.CharField(blank=True, max_length=255, verbose_name='Phone')),
                ('target', models.CharField(blank=True, choices=[('_blank', 'Open in new window'), ('_self', 'Open in same window'), ('_parent', 'Delegate to parent'), ('_top', 'Delegate to top')], max_length=255, verbose_name='Target')),
                ('attributes', djangocms_attributes_field.fields.AttributesField(blank=True, default=dict, verbose_name='Attributes')),
                ('cmsplugin_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='themes_bootstrapcarouselslide', serialize=False, to='cms.CMSPlugin')),
                ('carousel_content', djangocms_text_ckeditor.fields.HTMLField(blank=True, default='', help_text='Content may also be added using child plugins.', verbose_name='Content')),
                ('carousel_image', filer.fields.image.FilerImageField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.FILER_IMAGE_MODEL, verbose_name='Slide image')),
                ('internal_link', models.ForeignKey(blank=True, help_text='If provided, overrides the external link.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cms.Page', verbose_name='Internal link')),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin',),
        ),
        migrations.CreateModel(
            name='BootstrapColumnModel',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='themes_bootstrapcolumnmodel', serialize=False, to='cms.CMSPlugin')),
                ('template', models.CharField(blank=True, max_length=250, null=True, verbose_name='Column template')),
                ('column_size', models.PositiveSmallIntegerField(blank=True, help_text='Numeric value from 1 - 12. Spreads the columns evenly when empty.', null=True, validators=[django.core.validators.MaxValueValidator(12)], verbose_name='Column size')),
                ('column_type', models.CharField(blank=True, choices=[('col', 'Column'), ('w-100', 'Break'), ('', 'Empty')], default='col', max_length=255, verbose_name='Column type')),
                ('lg_col', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(12)])),
                ('lg_ml', models.BooleanField(default=False)),
                ('lg_mr', models.BooleanField(default=False)),
                ('lg_order', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(12)])),
                ('md_col', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(12)])),
                ('md_ml', models.BooleanField(default=False)),
                ('md_mr', models.BooleanField(default=False)),
                ('md_order', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(12)])),
                ('sm_col', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(12)])),
                ('sm_ml', models.BooleanField(default=False)),
                ('sm_order', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(12)])),
                ('xl_col', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(12)])),
                ('xl_ml', models.BooleanField(default=False)),
                ('xl_mr', models.BooleanField(default=False)),
                ('xl_order', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(12)])),
                ('xs_col', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(12)])),
                ('xs_ml', models.BooleanField(default=False)),
                ('xs_mr', models.BooleanField(default=False)),
                ('xs_order', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(12)])),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin',),
        ),
        migrations.CreateModel(
            name='BootstrapRowModel',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='themes_bootstraprowmodel', serialize=False, to='cms.CMSPlugin')),
                ('template', models.CharField(blank=True, max_length=250, null=True, verbose_name='Row template')),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin',),
        ),
        migrations.CreateModel(
            name='SimpleBootstrapCardModel',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='themes_simplebootstrapcardmodel', serialize=False, to='cms.CMSPlugin')),
                ('template', models.CharField(blank=True, max_length=250, null=True, verbose_name='Card template')),
                ('body', djangocms_text_ckeditor.fields.HTMLField(blank=True, null=True, verbose_name='Body content')),
                ('footer', djangocms_text_ckeditor.fields.HTMLField(blank=True, help_text='Optional', null=True, verbose_name='Footer content')),
                ('cardPicture', filer.fields.image.FilerImageField(blank=True, help_text='If set, this picture goes at the top of the card, and it is scaled to the width of the card.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='card_picture', to=settings.FILER_IMAGE_MODEL, verbose_name='Header Picture')),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin',),
        ),
    ]
